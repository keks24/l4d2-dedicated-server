# -*- mode: ruby -*-
# vi: set ft=ruby :

#############################################################################
# Copyright 2020 Ramon Fischer                                              #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

$prerequisites_l4d2_ds_development_vm = <<SCRIPT
mkdir --parents "/home/vagrant/.ansible/facts.d"
mkdir --parents "/home/vagrant/.ansible/tmp"
chmod --recursive 700 "/home/vagrant/.ansible"
chown --recursive vagrant:vagrant "/home/vagrant/.ansible"

chmod 750 "/etc/sudoers.d"
cat > "/etc/sudoers.d/01-vagrant" <<EOF
# this file was created by "vagrant". all changes will be lost!

# disable tty for the user "vagrant"
Defaults:vagrant !requiretty
# allow the user "vagrant" on the host "$(hostname)" to become any user or group "(ALL:ALL)" and to execute any commands "ALL" without providing a password "NOPASSWD"
vagrant $(hostname)=(ALL:ALL) NOPASSWD:ALL
EOF
chmod 440 "/etc/sudoers.d/01-vagrant"

# do not allow executing "su" for users, who are member of the group "sudo"
sed --regexp-extended --in-place "s/.?.*auth.*required.*pam_wheel.so.*deny.*group=nosu/auth       required   pam_wheel.so deny group=sudo/" "/etc/pam.d/su"

# cleanup
rm "/tmp/vagrant-shell"
SCRIPT

$prerequisites_l4d2_ds_provision_vm = <<SCRIPT
mkdir --parents "/home/vagrant/.ansible/facts.d"
mkdir --parents "/home/vagrant/.ansible/tmp"
mkdir --parents "/home/vagrant/.local/etc/ansible/cached_facts"
mkdir --parents "/home/vagrant/.local/etc/ansible/retry"
chmod --recursive 700 "/home/vagrant/.ansible"
chmod --recursive 700 "/home/vagrant/.local"
chown --recursive vagrant:vagrant "/home/vagrant/.ansible"
chown --recursive vagrant:vagrant "/home/vagrant/.local"

cp "/vagrant/.vagrant/machines/l4d2-ds-development-vm/virtualbox/private_key" "/home/vagrant/.ssh/l4d2-ds-development-vm_private_key"
chmod 600 "/home/vagrant/.ssh/l4d2-ds-development-vm_private_key"
mkdir --parents --mode="700" "/home/vagrant/.ssh/cm"
chown --recursive vagrant:vagrant "/home/vagrant/.ssh"

chmod 750 "/etc/sudoers.d"
cat > "/etc/sudoers.d/01-vagrant" <<EOF
# this file was created by "vagrant". all changes will be lost!

# disable tty for the user "vagrant"
Defaults:vagrant !requiretty
# allow the user "vagrant" on the host "$(hostname)" to become any user or group "(ALL:ALL)" and to execute any commands "ALL" without providing a password "NOPASSWD"
vagrant $(hostname)=(ALL:ALL) NOPASSWD:ALL
EOF
chmod 440 "/etc/sudoers.d/01-vagrant"

# do not allow executing "su" for users, who are member of the group "sudo"
sed --regexp-extended --in-place "s/.?.*auth.*required.*pam_wheel.so.*deny.*group=nosu/auth       required   pam_wheel.so deny group=sudo/" "/etc/pam.d/su"

mkdir --parents --mode="740" "/var/log/ansible"
touch "/var/log/ansible/ansible.log"
chmod 640 "/var/log/ansible/ansible.log"
chown --recursive vagrant:vagrant "/var/log/ansible"

cat > "/etc/logrotate.d/ansible" <<EOF
/var/log/ansible/ansible.log
{
    weekly
    rotate 12
    compress
    delaycompress
    missingok
    notifempty
    create 0640 vagrant vagrant
}
EOF

# cleanup
rm "/tmp/vagrant-shell"
SCRIPT

Vagrant.configure("2") do |config|
    config.vm.box = "debian/buster64"
    config.vm.box_check_update = "true"
    config.vm.synced_folder ".", "/vagrant", type: "virtualbox", owner: "vagrant", group: "vagrant"

    if Vagrant.has_plugin?("vagrant-vbguest")
        config.vbguest.auto_update = "true"
        config.vbguest.no_remote = "true"
    end

    # internal vm, which is configured like the real machine
    config.vm.define "l4d2-ds-development-vm" do |vmConfig|
        vmConfig.vm.provision "shell", inline: $prerequisites_l4d2_ds_development_vm
        vmConfig.vm.synced_folder ".", "/vagrant", disabled: "true"
        vmConfig.vbguest.auto_update = "false"

        vmConfig.vm.hostname = "l4d2-ds-development-vm"
        vmConfig.vm.network "private_network", ip: "192.168.100.100", virtualbox__intnet: "vm_private_network"
        # virtualbox nat address range: https://www.virtualbox.org/manual/ch09.html#changenat
        vmConfig.vm.network "private_network", ip: "10.0.2.254"
        # required ports for "srcds": https://developer.valvesoftware.com/wiki/Source_Dedicated_Server#Connectivity
        ## server (default)
        vmConfig.vm.network "forwarded_port", guest: "27015", guest_ip: "10.0.2.254", host: "27015", host_ip: "127.0.0.42", protocol: "tcp"
        vmConfig.vm.network "forwarded_port", guest: "27015", guest_ip: "10.0.2.254", host: "27015", host_ip: "127.0.0.42", protocol: "udp"
        ## sourcetv (default)
        vmConfig.vm.network "forwarded_port", guest: "27020", guest_ip: "10.0.2.254", host: "27020", host_ip: "127.0.0.42", protocol: "udp"
        ## vac (default)
        vmConfig.vm.network "forwarded_port", guest: "26901", guest_ip: "10.0.2.254", host: "26901", host_ip: "127.0.0.42", protocol: "udp"
        ## netconsole (custom)
        ## caution!: the communication via this port is not encrypted and therefore vulnerable for a man-in-the-middle attack!
        ##           on the vm the password is also visible in the process list! ($ ps aux | grep "srcds")
        ###
        ### $ telnet 127.0.0.42 42000
        ### $ tcpdump --interface="lo" -X --snapshot-length="0"
        ### 12:51:32.182466 IP <some_hostname>.58736 > 127.0.0.42.42000: Flags [P.], seq 23:72, ack 469, win 512, options [nop,nop,TS val 2002442302 ecr 2954406813], length 49
        ### 0x0000:  4510 0065 d4cb 4000 4006 678c 7f00 0001  E..e..@.@.g.....
        ### 0x0010:  7f00 002a e570 a410 359d 313b ed0b b299  ...*.p..5.1;....
        ### 0x0020:  8018 0200 fe82 0000 0101 080a 775a d83e  ............wZ.>
        ### 0x0030:  b018 ab9d 5041 5353 2065 4b70 6a30 5e61  ....PASS.eKpj0^a
        ### 0x0040:  6a58 7e5e 6428 7d79 5c59 7d71 6563 252c  jX~^d(}y\Y}qec%,
        ### 0x0050:  4d3b 2f7b 5734 596e 6669 496a 6367 6d7b  M;/{W4YnfiIjcgm{
        ### 0x0060:  4432 400d 0a                             D2@..
        ###
        ### to mitigate this, connect to the vm via "ssh" and use the loopback device:
        ####
        #### $ vagrant ssh l4d2-ds-development-vm
        #### $ telnet 127.0.0.1 42000
        ####
        ### ssh tunneling and port forwarding from the host would also mitigate this:
        ####
        #### $ ssh -i ".vagrant/machines/l4d2-ds-development-vm/virtualbox/private_key" -L 127.0.0.42:42000:0.0.0.0:42000 vagrant@127.0.0.1 -p 2222
        #### $ telnet 127.0.0.42 42000
        ####
        #vmConfig.vm.network "forwarded_port", guest: "42000", guest_ip: "0.0.0.0", host: "42000", host_ip: "127.0.0.42", protocol: "tcp"

        # bridged network via dhcp
        #vmConfig.vm.network "public_network"
        # bridged network via static ip address
        #vmConfig.vm.network "public_network", ip: "192.168.1.2"

        vmConfig.vm.provider "virtualbox" do |vb|
            vb.memory = "8192"
            vb.cpus = "2"
            vb.name = "l4d2-ds-development-vm"
            vb.linked_clone = "true"
            # enable nat dns resolving: http://www.virtualbox.org/manual/ch09.html#nat_host_resolver_proxy
            vb.customize [ "modifyvm", :id, "--natdnshostresolver1", "on" ]
        end
    end

    # internal vm, which provides "l4d2-ds-development-vm"
    config.vm.define "l4d2-ds-provision-vm" do |vmConfig|
        vmConfig.vm.provision "shell", inline: $prerequisites_l4d2_ds_provision_vm
        vmConfig.vm.hostname = "l4d2-ds-provision-vm"
        vmConfig.vm.network "private_network", ip: "192.168.100.99", virtualbox__intnet: "vm_private_network"

        vmConfig.vm.provider "virtualbox" do |vb|
            vb.memory = "512"
            vb.cpus = "1"
            vb.name = "l4d2-ds-provision-vm"
            vb.linked_clone = "true"
        end

        vmConfig.vm.provision "ansible_local" do |ansible|
            ansible.provisioning_path = "/vagrant"
            ansible.playbook = "provisioning/playbooks/install_l4d2_ds.yml"
            ansible.inventory_path = "provisioning/inventory.yml"
            ansible.config_file = "provisioning/ansible.cfg"
            ansible.limit = "l4d2-ds-development-vm"
            ansible.install_mode = "pip"
            #ansible.version = "2.10.3"
            #ansible.verbose = "-vvvv"
        end
    end
end
